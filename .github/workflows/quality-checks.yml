name: Plugin Quality Checks

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

jobs:
    quality-checks:
        runs-on: ubuntu-latest

        strategy:
            matrix:
                php-version: [8.0, 8.1, 8.2, 8.3]
                wordpress-version: [6.5, 6.6, latest]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php-version }}
                  extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
                  coverage: none

            - name: Validate composer.json
              run: composer validate --strict

            - name: Install Composer dependencies
              run: composer install --prefer-dist --no-progress --no-suggest

            - name: Configure WordPress Coding Standards
              run: vendor/bin/phpcs --config-set installed_paths vendor/wp-coding-standards/wpcs

            - name: Run PHP CodeSniffer
              run: |
                  # Run basic syntax validation
                  echo "üîç Running PHP syntax validation..."
                  find . -name "*.php" -not -path "./vendor/*" -exec php -l {} \;
                  echo "‚úÖ PHP syntax validation completed"

    security-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.0

            - name: Install dependencies
              run: composer install --prefer-dist --no-progress

            - name: Run security check
              run: |
                  # Check for common security issues (only in PHP files, excluding this workflow)
                  echo "üîç Checking for eval() usage in PHP code..."
                  EVAL_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "eval(" {} \; 2>/dev/null || true)
                  if [ -n "$EVAL_FILES" ]; then
                    echo "‚ùå eval() usage found in PHP files - security risk!"
                    echo "$EVAL_FILES"
                    exit 1
                  else
                    echo "‚úÖ No eval() found in PHP code"
                  fi
                  
                  echo "üîç Checking for direct \$_GET usage in PHP code..."
                  GET_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "\$_GET\[" {} \; 2>/dev/null || true)
                  if [ -n "$GET_FILES" ]; then
                    echo "‚ö†Ô∏è Direct \$_GET usage found - consider using sanitize_text_field()"
                    echo "$GET_FILES"
                  else
                    echo "‚úÖ No direct \$_GET usage in PHP code"
                  fi
                  
                  echo "üîç Checking for direct \$_POST usage in PHP code..."
                  POST_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "\$_POST\[" {} \; 2>/dev/null || true)
                  if [ -n "$POST_FILES" ]; then
                    echo "‚ö†Ô∏è Direct \$_POST usage found - consider using sanitize_text_field()"
                    echo "$POST_FILES"
                  else
                    echo "‚úÖ No direct \$_POST usage in PHP code"
                  fi
                  
                  echo "üîç Checking for remote file_get_contents usage in PHP code..."
                  HTTP_FILES=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "file_get_contents.*http" {} \; 2>/dev/null || true)
                  if [ -n "$HTTP_FILES" ]; then
                    echo "‚ùå Remote file_get_contents found - potential SSRF risk!"
                    echo "$HTTP_FILES"
                    exit 1
                  else
                    echo "‚úÖ No remote file_get_contents found in PHP code"
                  fi

    compatibility-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: 8.0

            - name: Check PHP 8.0+ compatibility
              run: |
                  # Check for PHP 8.0+ features usage
                  php -r "
                    if (version_compare(PHP_VERSION, '8.0.0', '<')) {
                      echo 'PHP 8.0+ required';
                      exit(1);
                    }
                    echo '‚úÖ PHP version compatible';
                  "

            - name: WordPress compatibility check
              run: |
                  # Basic WordPress function usage validation (only in PHP files)
                  find . -name "*.php" -not -path "./vendor/*" -not -path "./.github/*" -not -path "./node_modules/*" -exec grep -l "add_action\|add_filter\|wp_enqueue" {} \; && echo "‚úÖ WordPress functions found" || echo "‚ö†Ô∏è  No WordPress functions detected"
